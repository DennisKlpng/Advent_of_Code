cmake_minimum_required (VERSION 3.31)
project (CMakeDay2)

# file(STRINGS ../inputs/Test_2.txt test_in)
file(STRINGS ../inputs/Data_2.txt test_in)

function(solve input_data part_2)
    set(RES "0")
    set(GAME_INDEX "1")
    set(RED_MAX "12")
    set(GREEN_MAX "13")
    set(BLUE_MAX "14")
    foreach(LINE ${input_data})
        set(IS_POSSIBLE TRUE)
        set(RED_MIN "0")
        set(GREEN_MIN "0")
        set(BLUE_MIN "0")
        foreach(ELEM ${LINE})
            set(RED_CURR "0")
            set(BLUE_CURR "0")
            set(GREEN_CURR "0")
            string(REGEX MATCHALL "[0-9]+ [a-z]+" MATCHES ${ELEM})
            foreach(MATCH ${MATCHES})
                string(REGEX MATCH "[0-9]+" COUNT ${MATCH})
                string(REGEX MATCH "[a-z]+" COLOR ${MATCH})
                if(${COLOR} STREQUAL "red")
                    math(EXPR RED_CURR "${RED_CURR} + ${COUNT}")
                elseif(${COLOR} STREQUAL "blue")
                    math(EXPR BLUE_CURR "${BLUE_CURR} + ${COUNT}")
                elseif(${COLOR} STREQUAL "green")
                    math(EXPR GREEN_CURR "${GREEN_CURR} + ${COUNT}")
                endif()
                # message(red ${RED_CURR})
                # message(blue ${BLUE_CURR})
                # message(green ${GREEN_CURR})
                # check if set uses more marbles than possible
                if((${RED_CURR} GREATER ${RED_MAX}) OR (${GREEN_CURR} GREATER ${GREEN_MAX}) OR 
                        (${BLUE_CURR} GREATER ${BLUE_MAX}))
                    set(IS_POSSIBLE FALSE)
                endif()
                if(${RED_CURR} GREATER ${RED_MIN})
                    SET(RED_MIN ${RED_CURR})
                endif()
                if(${GREEN_CURR} GREATER ${GREEN_MIN})
                    SET(GREEN_MIN ${GREEN_CURR})
                endif()
                if(${BLUE_CURR} GREATER ${BLUE_MIN})
                    SET(BLUE_MIN ${BLUE_CURR})
                endif()
            endforeach() # MATCH aka DICE
        endforeach() # SET
        if(${IS_POSSIBLE} AND NOT part_2)
            math(EXPR RES "${RES} + ${GAME_INDEX}")
        endif()
            
        math(EXPR GAME_INDEX "${GAME_INDEX} + 1")
        math(EXPR POWER "${RED_MIN} * ${GREEN_MIN} * ${BLUE_MIN}")
        message(${POWER})
        if(part_2)
            math(EXPR RES "${RES} + ${POWER}")
        endif()
    endforeach() # GAME
    if(part_2)
        message("Res part 2: " ${RES})
    else()
        message("Res part 1: " ${RES})
    endif()
endfunction()

solve("${test_in}" "FALSE")
solve("${test_in}" "TRUE")